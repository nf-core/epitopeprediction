/*
 * -------------------------------------------------
 *  nf-core/epitopeprediction Nextflow config file
 * -------------------------------------------------
 * Default config options for all environments.
 */

// Global default params, used in configs
params {
  // Pipeline specific options
  alleles = ''
  filter_self = false
  mhc_class = 1
  peptides = ''
  proteins = ''
  max_peptide_length = (mhc_class == 1) ? 11 : 16
  min_peptide_length = (mhc_class == 1) ? 8 : 15
  tools = 'syfpeithi'
  genome_version = 'GRCh37'
  wild_type = false
  fasta_output = false
  peptides_split_maxchunks = 100
  peptides_split_minchunksize = 5000
  show_supported_models = false
  netmhcpan_path = false
  netmhc_path = false
  netmhciipan_path = false
  netmhcii_path = false

  // Additional annotation files
  proteome = ''

  // Boilerplate options
  input = ''
  publish_dir_mode = 'copy'
  outdir = './results'
  name = false
  multiqc_config = false
  email = false
  email_on_fail = false
  max_multiqc_email_size = 25.MB
  plaintext_email = false
  monochrome_logs = false
  help = false
  tracedir = "${params.outdir}/pipeline_info"
  igenomes_base = 's3://ngi-igenomes/igenomes/'
  igenomes_ignore = true
  custom_config_version = 'master'
  custom_config_base = "https://raw.githubusercontent.com/nf-core/configs/${params.custom_config_version}"
  hostnames = false
  config_profile_description = false
  config_profile_contact = false
  config_profile_url = false

  // Defaults only, expecting to be overwritten
  max_memory = 128.GB
  max_cpus = 16
  max_time = 240.h

  mem_mode = 'low'  // to adjust memory requirements (e.g. when using arbitrary big peptide or protein files)
}

// Container slug. Stable releases should specify release tag!
// Developmental code should specify :dev
process.container = 'nfcore/epitopeprediction:dev'

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Load nf-core custom profiles from different Institutions
try {
  includeConfig "${params.custom_config_base}/nfcore_custom.config"
} catch (Exception e) {
  System.err.println("WARNING: Could not load nf-core/config profiles: ${params.custom_config_base}/nfcore_custom.config")
}

profiles {
  conda { process.conda = "$projectDir/environment.yml" }
  debug { process.beforeScript = 'echo $HOSTNAME' }
  docker {
    docker.enabled = true
    // Avoid this error:
    //   WARNING: Your kernel does not support swap limit capabilities or the cgroup is not mounted. Memory limited without swap.
    // Testing this in nf-core after discussion here https://github.com/nf-core/tools/pull/351
    // once this is established and works well, nextflow might implement this behavior as new default.
    docker.runOptions = '-u \$(id -u):\$(id -g)'
  }
  singularity {
    singularity.enabled = true
    singularity.autoMounts = true
  }
  podman {
    podman.enabled = true
  }
  test { includeConfig 'conf/test.config' }
  test_variant_tsv { includeConfig 'conf/test_variant_tsv.config' }
  test_peptides { includeConfig 'conf/test_peptides.config' }
  test_peptides_h2 { includeConfig 'conf/test_peptides_h2.config' }
  test_proteins { includeConfig 'conf/test_proteins.config' }
  test_mhcnuggets { includeConfig 'conf/test_mhcnuggets.config' }
  test_mhcflurry { includeConfig 'conf/test_mhcflurry.config' }
  test_full { includeConfig 'conf/test_full.config' }
}

// Load igenomes.config if required
if (!params.igenomes_ignore) {
  includeConfig 'conf/igenomes.config'
}

// Export these variables to prevent local Python/R libraries from conflicting with those in the container
env {
  PYTHONNOUSERSITE = 1
  R_PROFILE_USER = "/.Rprofile"
  R_ENVIRON_USER = "/.Renviron"
}

// Capture exit codes from upstream processes when piping
process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}
dag {
  enabled = true
  file = "${params.tracedir}/pipeline_dag.svg"
}

manifest {
  name = 'nf-core/epitopeprediction'
  author = 'Christopher Mohr, Alexander Peltzer'
  homePage = 'https://github.com/nf-core/epitopeprediction'
  description = 'A fully reproducible and state of the art epitope prediction pipeline.'
  mainScript = 'main.nf'
  nextflowVersion = '>=20.04.0'
  version = '1.2.0dev'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}

// Function to set memory dependend on user specified memory mode
def get_mem_mode(mem0, mem1, mem2) {
  if (params.mem_mode == 'low') {
    return check_max( mem0, 'memory' )
  } else if (params.mem_mode == 'intermediate') {
    return check_max( mem1, 'memory' )
  } else {
    return check_max( mem2, 'memory' )
  }
}
